input {
	tcp {
		port => 50000
		codec => plain
	}
}

filter {
  grok {
    match => { "message" => "(?<[flow][id]>[0-9\.\-]*)(?:[\s\,]*%{IP:[source][ip]})(?:[\s\,]*%{INT:[source][port]})(?:[\s\,]*%{IP:[destination][ip]})(?:[\s\,]*%{INT:[destination][port]})(?:[\s\,]*%{INT:[protocol]})(?:[\s\,]*%{INT:[timestamp][day]})(?:[\s\/]*%{INT:[timestamp][month]})(?:[\s\/]*(?<[timestamp][year]>[0-9]{4}))(?:[\s]*%{INT:[timestamp][hour]})(?:[\s\:]*%{INT:[timestamp][minute]})(?:[\s\:]*%{INT:[timestamp][second]})" }
	#(?:[\s\,]*%{NUMBER:[flow][duration]})(?:[\s\,]*%{NUMBER:[total][fwd][packets]})(?:[\s\,]*%{NUMBER:[total][backward][packets]})(?:[\s\,]*%{NUMBER:[total][length_of_fwd_packets]})(?:[\s\,]*%{NUMBER:[total][length_of_bwd_packets]})(?:[\s\,]*%{NUMBER:[fwd][packet_length][max]})(?:[\s\,]*%{NUMBER:[fwd][packet_length][min]})(?:[\s\,]*%{NUMBER:[fwd][packet_length][mean]})(?:[\s\,]*%{NUMBER:[fwd][packet_length][std]})(?:[\s\,]*%{NUMBER:[bwd][packet_length][max]})
	#(?:[\s\,]*%{NUMBER:[bwd][packet_length][min]})(?:[\s\,]*%{NUMBER:[bwd][packet_length][mean]})(?:[\s\,]*%{NUMBER:[bwd][packet_length][std]})(?:[\s\,]*%{NUMBER:[flow][bytes]})(?:[\s\,]*%{NUMBER:[flow][packets]})(?:[\s\,]*%{NUMBER:[flow][iat][mean]})(?:[\s\,]*%{NUMBER:[flow][iat][std]})(?:[\s\,]*%{NUMBER:[flow][iat][max]})(?:[\s\,]*%{NUMBER:[flow][iat][min]})(?:[\s\,]*%{NUMBER:[fwd][iat][total]})(?:[\s\,]*%{NUMBER:[fwd][iat][mean]})(?:[\s\,]*%{NUMBER:[fwd][iat][std]})
	#(?:[\s\,]*%{NUMBER:[fwd][iat][max]})(?:[\s\,]*%{NUMBER:[fwd][iat][min]})(?:[\s\,]*%{NUMBER:[bwd][iat][total]})(?:[\s\,]*%{NUMBER:[bwd][iat][mean]})(?:[\s\,]*%{NUMBER:[bwd][iat][std]})(?:[\s\,]*%{NUMBER:[bwd][iat][max]})(?:[\s\,]*%{NUMBER:[bwd][iat][min]})(?:[\s\,]*%{NUMBER:[fwd][psh][flags]})(?:[\s\,]*%{NUMBER:[bwd][psh][flags]})(?:[\s\,]*%{NUMBER:[fwd][urg][flags]})(?:[\s\,]*%{NUMBER:[bwd][urg][flags]})(?:[\s\,]*%{NUMBER:[fwd][header][length]})(?:[\s\,]*%{NUMBER:[bwd][header][length]})
	#(?:[\s\,]*%{NUMBER:[fwd][packets]})(?:[\s\,]*%{NUMBER:[bwd][packets]})(?:[\s\,]*%{NUMBER:[min][packet][length]})(?:[\s\,]*%{NUMBER:[max][packet][length]})(?:[\s\,]*%{NUMBER:[packet][length][mean]})(?:[\s\,]*%{NUMBER:[packet][length][std]})(?:[\s\,]*%{NUMBER:[packet][length][Variance]})(?:[\s\,]*%{NUMBER:[fin][flag][count]})(?:[\s\,]*%{NUMBER:[syn][flag][count]})(?:[\s\,]*%{NUMBER:[rst][flag][count]})(?:[\s\,]*%{NUMBER:[psh][flag][count]})(?:[\s\,]*%{NUMBER:[ack][flag][count]})(?:[\s\,]*%{NUMBER:[urg][flag][count]})
	#(?:[\s\,]*%{NUMBER:[cew][flag][count]})(?:[\s\,]*%{NUMBER:[ece][flag][count]})(?:[\s\,]*%{NUMBER:[down][up][ratio]})(?:[\s\,]*%{NUMBER:[average][packet][size]})(?:[\s\,]*%{NUMBER:[avg][fwd][segment][size]})(?:[\s\,]*%{NUMBER:[avg][bwd][segment][size]})(?:[\s\,]*%{NUMBER:[fwd][header][length]})(?:[\s\,]*%{NUMBER:[fwd][avg][bytes][bulk]})(?:[\s\,]*%{NUMBER:[fwd][avg][packets][bulk]})(?:[\s\,]*%{NUMBER:[fwd][avg][bulk][rate]})(?:[\s\,]*%{NUMBER:[bwd][avg][bytes][bulk]})(?:[\s\,]*%{NUMBER:[bwd][avg][packets][bulk]})(?:[\s\,]*%{NUMBER:[bwd][avg][bulk][rate]})
	#(?:[\s\,]*%{NUMBER:[subflow][fwd][packets]})(?:[\s\,]*%{NUMBER:[subflow][fwd][bytes]})(?:[\s\,]*%{NUMBER:[subflow][bwd][packets]})(?:[\s\,]*%{NUMBER:[subflow][bwd][bytes]})(?:[\s\,]*%{NUMBER:[init_win_bytes_forward]})(?:[\s\,]*%{NUMBER:[init_win_bytes_backward]})(?:[\s\,]*%{NUMBER:[act_data_pkt_fwd]})(?:[\s\,]*%{NUMBER:[min_seg_size_forward]})(?:[\s\,]*%{NUMBER:[active][mean]})(?:[\s\,]*%{NUMBER:[active][std]})(?:[\s\,]*%{NUMBER:[active][max]})(?:[\s\,]*%{NUMBER:[active][min]})(?:[\s\,]*%{NUMBER:[idle][mean]})(?:[\s\,]*%{NUMBER:[idle][std]})(?:[\s\,]*%{NUMBER:[idle][max]})
	#(?:[\s\,]*%{NUMBER:[idle][min]})(?:[\s\,]*%{WORD:[label]})(?:[\s\,]*%{NUMBER:[layer_7_protocol]})(?:[\s\,]*%{WORD:[protocol_name]})" }
    tag_on_failure => "parsing_data_failed"
	tag_on_timeout => "parsing_data_timeout"
	add_field => {
		gen => "network-traffic"
	}
	target => "parsed_data"
  }

  if [gen] == "network-traffic" {
		http {
			url => "https://api.blocklist.de/api.php?ip=%{[parsed_data][source][ip]}&start=1&format=json"
			target_body => "[parsed_data][source][reputation]"
		}
		json{
			source => "[parsed_data][source][reputation]"
			target => "[parsed_data][source][reputation]"
		}

		http {
			url => "https://api.blocklist.de/api.php?ip=%{[parsed_data][destination][ip]}&start=1&format=json"
			target_body => "[parsed_data][destination][reputation]"
		}
		json{
			source=> "[parsed_data][destination][reputation]"
			target => "[parsed_data][destination][reputation]"
		}

		geoip {
			source => "[parsed_data][source][ip]"
			target => "[parsed_data][source][geoip]"
		}

		geoip {
			source => "[parsed_data][destination][ip]"
			target => "[parsed_data][destination][geoip]"
		}

		if [parsed_data][source][geoip][ip] and [parsed_data][source][geoip][ip] != "" {
			mutate {
				add_field => {
					"[parsed_data][source][reverse_dns]" => "%{[parsed_data][source][geoip][ip]}"
				}
				add_tag => "geoip_src_success"
			}
		}

		if [parsed_data][destination][geoip][ip] and [parsed_data][destination][geoip][ip] != "" {
			mutate {
				add_field => {
					"[parsed_data][destination][reverse_dns]" => "%{[parsed_data][destination][geoip][ip]}"
				}
				add_tag => "geoip_dst_success"
			}
		}

		if "geoip_src_success" in [tags]{
			dns {
				reverse => ["[parsed_data][source][reverse_dns]"]
				action => "replace"
			}
		}

		if "geoip_dst_success" in [tags]{
			dns {
				reverse => ["[parsed_data][destination][reverse_dns]"]
				action => "replace"
			}
		}
    }
}

output {
	if [gen] == "network-traffic" {
		elasticsearch {
       		hosts => ["elasticsearch:9200"]
			user => "elastic"
			password => "changeme"
			index => "network-traffic-%{+YYYY.MM}"
		}
    }
	stdout {
		codec => rubydebug
	}
}
