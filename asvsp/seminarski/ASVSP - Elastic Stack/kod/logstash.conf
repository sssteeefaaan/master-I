input {
	tcp {
		port => 50000
		codec => plain
	}
}

filter {
  grok {
    match => { "message" => "(?<[flow][id]>[0-9\.\-]*)(?:[\s\,]*%{IP:[source][ip]})(?:[\s\,]*%{INT:[source][port]}) (?:[\s\,]*%{IP:[destination][ip]})(?:[\s\,]*%{INT:[destination][port]})(?:[\s\,]*%{INT:[protocol]}) (?:[\s\,]*%{INT:[timestamp][day]})(?:[\s\/]*%{INT:[timestamp][month]})(?:[\s\/]*(?<[timestamp][year]>[0-9]{4})) (?:[\s]*%{INT:[timestamp][hour]})(?:[\s\:]*%{INT:[timestamp][minute]})(?:[\s\:]*%{INT:[timestamp][second]})" }
	tag_on_failure => "parsing_data_failed"
	tag_on_timeout => "parsing_data_timeout"
	add_field => {
		gen => "network-traffic"
	}
	target => "parsed_data"
  }

  if [gen] == "network-traffic" {
		http {
			url => "https://api.blocklist.de/api.php?ip=%{[parsed_data][source][ip]}&start=1&format=json"
			target_body => "[parsed_data][source][reputation]"
		}
		json{
			source => "[parsed_data][source][reputation]"
			target => "[parsed_data][source][reputation]"
		}

		http {
			url => "https://api.blocklist.de/api.php?ip=%{[parsed_data][destination][ip]}&start=1&format=json"
			target_body => "[parsed_data][destination][reputation]"
		}
		json{
			source=> "[parsed_data][destination][reputation]"
			target => "[parsed_data][destination][reputation]"
		}

		geoip {
			source => "[parsed_data][source][ip]"
			target => "[parsed_data][source][geoip]"
		}

		geoip {
			source => "[parsed_data][destination][ip]"
			target => "[parsed_data][destination][geoip]"
		}

		if [parsed_data][source][geoip][ip] and [parsed_data][source][geoip][ip] != "" {
			mutate {
				add_field => {
					"[parsed_data][source][reverse_dns]" => "%{[parsed_data][source][geoip][ip]}"
				}
				add_tag => "geoip_src_success"
			}
		}

		if [parsed_data][destination][geoip][ip] and [parsed_data][destination][geoip][ip] != "" {
			mutate {
				add_field => {
					"[parsed_data][destination][reverse_dns]" => "%{[parsed_data][destination][geoip][ip]}"
				}
				add_tag => "geoip_dst_success"
			}
		}

		if "geoip_src_success" in [tags]{
			dns {
				reverse => ["[parsed_data][source][reverse_dns]"]
				action => "replace"
			}
		}

		if "geoip_dst_success" in [tags]{
			dns {
				reverse => ["[parsed_data][destination][reverse_dns]"]
				action => "replace"
			}
		}
    }
}

output {
	if [gen] == "network-traffic" {
		elasticsearch {
       		hosts => ["elasticsearch:9200"]
			user => "elastic"
			password => "changeme"
			index => "network-traffic-%{+YYYY.MM}"
		}
    }
	stdout {
		codec => rubydebug
	}
}
